""" Cliente """
type Cliente {
	id: ID
	nombre: String
	apellido: String
	empresa: String
	email: String
	tipo: TipoCliente
	pedidos: [Pedido]
}

""" Producto """
type Producto {
	id: ID
	nombre: String
	precio: Int
	stock: Int
}

""" Campos para definir un pedido """
type Pedido {
	producto: String
	precio: Int
}

""" Asigna la categoría del Cliente """
enum TipoCliente {
	BASICO
	PREMIUM
}

type Query {
	""" Obtén los datos de todos los clientes, opcionalmente puedes limitar el número de resultados y la paginación """
	getClientes(limite: Int, offset: Int): [Cliente]

	""" Obtén los datos de un cliente (especificando su id) """
	getCliente(id: ID!): Cliente

	""" Obtén el número total de clientes registrados en la base de datos """
	totalClientes: String
}

""" Campos para definir un cliente """
input ClienteInput {
	id: ID
	nombre: String!
	apellido: String
	empresa: String
	email: String!
	tipo: TipoCliente!
	pedidos: [PedidoInput]
}

""" Campos para definir un producto """
input ProductoInput {
	id: ID
	nombre: String!
	precio: Int!
	stock: Int!
}

input PedidoInput {
	producto: String
	precio: Int
}

""" Mutation para crear nuevos clientes """
type Mutation {
	""" Te permite crear nuevos clientes """
	# Nombre del resolver (Input con datos): Valor que retorna
	crearCliente(input: ClienteInput): Cliente

	""" Te permite actualizar los datos de un cliente """
	actualizarCliente(input: ClienteInput): Cliente

	""" Te permite eliminar un cliente """
	eliminarCliente(id: ID!): String


	# productos
	""" Te permite crear nuevos productos """
	nuevoProducto(input: ProductoInput): Producto
}